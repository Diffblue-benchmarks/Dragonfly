package com.alibaba.dragonfly.supernode.common.util;

import com.alibaba.dragonfly.supernode.common.util.RangeParseUtil;
import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class RangeParseUtilTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: RangeParseUtil */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 48 branch to line 52
   *  - conditional line 52 branch to line 56
   *  - conditional line 58 branch to line 61
   */

  @Test
  public void calculateBreakRangeInputPositivePositiveZeroOutputNotNull() {

    // Arrange
    final int startPieceNum = 9;
    final long rangeLength = 8L;
    final int pieceContSize = 0;

    // Act
    final String retval =
        RangeParseUtil.calculateBreakRange(startPieceNum, rangeLength, pieceContSize);

    // Assert result
    Assert.assertEquals("0-7", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire method.
   */

  @Test
  public void calculatePieceRangeInputPositivePositiveOutputNotNull() {

    // Arrange
    final int pieceNum = 7;
    final Integer pieceSize = 6;

    // Act
    final String retval = RangeParseUtil.calculatePieceRange(pieceNum, pieceSize);

    // Assert result
    Assert.assertEquals("42-47", retval);
  }
}

package com.alibaba.dragonfly.supernode.service.cdn.util;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;
import static org.powermock.api.mockito.PowerMockito.mockStatic;

import com.alibaba.dragonfly.supernode.service.cdn.util.PathUtil;
import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@PowerMockIgnore({"javax.management.*"})
@RunWith(PowerMockRunner.class)
public class PathUtilTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: PathUtil */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 57 branch to line 57
   */

  @Test
  public void getHttpPathInputNotNullOutputNotNull() {

    // Arrange
    final String taskId = "!!!";

    // Act
    final String retval = PathUtil.getHttpPath(taskId);

    // Assert result
    Assert.assertEquals("/qtdown/!!!/!!!", retval);
  }
}

package com.alibaba.dragonfly.supernode.repository;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;
import static org.powermock.api.mockito.PowerMockito.mockStatic;

import com.alibaba.dragonfly.supernode.repository.PieceState;
import com.alibaba.dragonfly.supernode.repository.ProgressRepository;
import com.diffblue.deeptestutils.Reflector;
import org.apache.commons.lang3.StringUtils;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.BitSet;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;

@PowerMockIgnore({"javax.management.*"})
@RunWith(PowerMockRunner.class)
public class ProgressRepositoryTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: ProgressRepository */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 120 branch to line 120
   */

  @Test
  public void removeCdnProgressInputNullOutputFalse() {

    // Arrange
    final ProgressRepository objectUnderTest = new ProgressRepository();
    final String taskId = null;

    // Act
    final boolean retval = objectUnderTest.removeCdnProgress(taskId);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 226 branch to line 226
   */

  @Test
  public void removeClientErrorInfoInputNullOutputFalse() {

    // Arrange
    final ProgressRepository objectUnderTest = new ProgressRepository();
    final String cid = null;

    // Act
    final boolean retval = objectUnderTest.removeClientErrorInfo(cid);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 101 branch to line 101
   */

  @Test
  public void removeClientProgressInputNullOutputFalse() {

    // Arrange
    final ProgressRepository objectUnderTest = new ProgressRepository();
    final String cid = null;

    // Act
    final boolean retval = objectUnderTest.removeClientProgress(cid);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 168 branch to line 168
   */

  @Test
  public void removeProducerLoadInputNullOutputFalse() {

    // Arrange
    final ProgressRepository objectUnderTest = new ProgressRepository();
    final String cid = null;

    // Act
    final boolean retval = objectUnderTest.removeProducerLoad(cid);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 252 branch to line 252
   */

  @Test
  public void removeServiceDownInfoInputNullOutputFalse() {

    // Arrange
    final ProgressRepository objectUnderTest = new ProgressRepository();
    final String cid = null;

    // Act
    final boolean retval = objectUnderTest.removeServiceDownInfo(cid);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 207 branch to line 207
   */

  @Test
  public void removeServiceErrorInfoInputNullOutputFalse() {

    // Arrange
    final ProgressRepository objectUnderTest = new ProgressRepository();
    final String cid = null;

    // Act
    final boolean retval = objectUnderTest.removeServiceErrorInfo(cid);

    // Assert result
    Assert.assertEquals(false, retval);
  }
}
